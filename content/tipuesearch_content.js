var tipuesearch = {"pages": [{'title': 'about', 'text': '國立虎尾科技大學機械設計工程系 \n 國立台灣大學 \n 機械設計工程系 \n cp2024 電腦程式 \n 課程教材： \n 使用 Jupyter 學習 Python （ 網站 、 電子書 ） \n 教育版帳號 microsoftonline 登錄點:\xa0  https://login.microsoftonline.com/ \n 團隊線上教學： \n 以「學號@nfu.edu.tw」登入 https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼： fqpabi8 \n \n 連結以太坊：\xa0 https:  //github.com/mdecp2024/hw-41323201 \n 網站連結： https:  //mdecp2024.github.io/hw-41323201 \n 其他資訊： \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'about.html'}, {'title': 'Attendance', 'text': '出席人數 (10%) - 自行舉證評分 \n 自行利用 Github 提交提交記錄評分。 \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW\xa01', 'text': '主題：基於瀏覽器的分散式版本次管理與整合方案開發環境（10%） \n USB隨身碟： \n 下載 python_2025_lite.7z  (428 MB, 解開壓縮後約1.5 GB) \n Jupiter \n 什麼是 Github 和 Codespace？ \n 你好世界 - GitHub 文檔 \n 利用包含學號的字串作為帳號，申請免費使用Github。 \n Python 課程教材： https://www.learnpythonwithjupyter.com/  - PART 1 \n \n 第 1 部分：建立基礎知識資料整理 (10%) \n 啟動可攜程序系統後，在命令列中: \n y:\\>cd Notebook \n y:\\notebook>jupyter lab --collaborative \n 進入 01_string_input_print.ipynb 練習如何修改PART1筆記本後存檔，上傳至作業文檔中的下載目錄後，穿過 https://nbviewer.org/ 將已經提交的 01_string_input_print.ipynb ，嵌入以下網頁中。 \n \n 上列 iframe 標註的 html 語法： \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後，滿足HW1自評分數輸入cp2024自評表單中。 \n \n', 'tags': '', 'url': 'HW\xa01.html'}, {'title': 'HW 1-1 Triangle Star', 'text': '\n 向ChatGPT詢問20種五階金字塔的寫法 \n \n 幫我用python寫一個五階金字塔，由*組成，給我20個不同的寫法 \n 1.基本迴圈 \n 對於範圍 (1, 6) 內的 i： \n    print(\' \' * (5 - i) + \'*\' * (2 * i - 1)) \n \n 2.使用字串連接 \n For i in the range (1, 6): \n    Space = \' \' * (5 - i) \n    star = \'*\' * (2 * i - 1) \n    列印（空格+星號） \n \n 3. Using format strings \n For i in the range (1, 6): \n    print(f"{\' \' * (5 - i)}{\'*\' * (2 * i - 1)}") \n \n 4.列表產生方式 \n monument = [\' \' * (5 - i) + \'*\' * (2 * i - 1) for i in range(1, 6)] \nprint(\'\\n\'.join(pyramid)) \n \n 5. 使用函數 \n def print_pyramid(n): \n    對於範圍 (1, n + 1) 中的 i： \n        print(\' \' * (n - i) + \'*\' * (2 * i - 1)) \n \nPrinting Pyramid (5) \n \n 6.反向迴圈 \n 對於範圍 (5, 0, -1) 內的 i： \n    print(\' \' * (5 - i) + \'*\' * (2 * i - 1)) \n \n 7. Use join \n For i in the range (1, 6): \n    print(\'\'.join([\' \' * (5 - i), \'*\' * (2 * i - 1)])) \n \n 8. Use map \n For i in the range (1, 6): \n    print(\'\'.join(map(str, [\' \' * (5 - i), \'*\' * (2 * i - 1)]))) \n \n 9. 使用遞回 \n def print_recursive(n, currently=1): \n    如果當前> n： \n        return \n    print(\' \' * (n - current) + \'*\' * (2 * current - 1)) \n    print_recursive(n, current + 1) \n \n遞歸列印(5) \n \n 10.使用 while 迴圈 \n I = 1 \n當我 <= 5 時： \n    print(\' \' * (5 - i) + \'*\' * (2 * i - 1)) \n    I += 1 \n \n 11. Use str.format \n For i in the range (1, 6): \n    print(\'{}{}\'.format(\' \' * (5 - i), \'*\' * (2 * i - 1))) \n \n 12. Use  f-string and list comprehension \n 金字塔 = [f"{\' \' * (5 - i)}{\'*\' * (2 * i - 1)}" for i in range(1, 6)] \nprint(\'\\n\'.join(pyramid)) \n \n 13. 使用 print 的多參數 \n For i in the range (1, 6): \n    print(\' \' * (5 - i), \'*\' * (2 * i - 1), sep=\'\') \n \n 14. Use zip \n NULL = [\' \' * (5 - i) for i in range(1, 6)] \n星星 = [\'*\' * (2 * i - 1) for i in range(1, 6)] \n對於 zip 中的 s、st（空格、星號）： \n    Print (s + st) \n \n 15. Use reduce \n 從 functools 匯入減少 \npyramid = reduce(lambda acc, i: acc + [\' \' * (5 - i) + \'*\' * (2 * i - 1)], range(1, 6), []) \nprint(\'\\n\'.join(pyramid)) \n \n 16. Use numpy \n 將 numpy 導入為 np \n金字塔 = np.array([\' \' * (5 - i) + \'*\' * (2 * i - 1) for i in range(1, 6)]) \nprint(\'\\n\'.join(pyramid)) \n \n 17. 使用類別 \n 金字塔類： \n    def __init__(self, height): \n        Self height = height \n \n    def 繪製（自身）： \n        對於範圍內的 i(1, self.height + 1): \n            print(\' \' * (self.height - i) + \'*\' * (2 * i - 1)) \n \np = pyramid(5) \np.draw() \n \n 18. Use Generators \n defgenerate_pyramid(n): \n    對於範圍 (1, n + 1) 中的 i： \n        產量 \' \' * (n - i) + \'*\' * (2 * i - 1) \n \n對於generate_pyramid(5)中的行： \n    Print (row) \n \n 19. Use itertools \n 從 itertools 匯入重複 \n對於範圍 (1, 6) 內的 i： \n    print(\'\'.join(重複(\' \', 5 - i) + 重複(\'*\', 2 * i - 1))) \n \n 20. 使用 string 模組 \n 導入字串 \nFor i in the range (1, 6): \n    print(string.whitespace * (5 - i) + \'*\' * (2 * i - 1)) \n \n >pythonw.exe -u“triangle_star.py” \n \n\xa0 \xa0 * \n \n\xa0 \xa0*** \n \n\xa0 ***** \n \n\xa0****** \n \n********* \n \n>退出代碼：0 \n \n', 'tags': '', 'url': 'HW 1-1 Triangle Star.html'}, {'title': 'HW 1-2 模擬排列', 'text': '1.開啟可攜環境 \n 2.在 可攜式程式環境中開啟data>CoppeliaSim，開啟coppeliaSim.exe \xa0 \n 3. 下載 zmq_remote_api_ex_cube_triangle.7z \xa0 \xa0 \n 4.開啟 zmq_remote_api_ex_cube_triangle，將 put_cubes_into_scene_1.py放入 SciTE編輯器 \n \n 5.讓 SciTE 編輯器運行 \n \n \n', 'tags': '', 'url': 'HW 1-2 模擬排列.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行良好的程序練習 \n 透過Jupyterlab良好的網頁，輪流指定各組編寫的主題1相關的程式練習，以及網頁內容（localhost與Codespaces環境）編輯。 \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'W7', 'text': '如何在倉儲中增加Brython: \n', 'tags': '', 'url': 'W7.html'}, {'title': 'HW 2', 'text': '主題：Python的數列、判斷式與重複迴圈 (20%) \n Python 課程教材： https://www.learnpythonwithjupyter.com/  - PART 2 與 Part 3 \n 馬尼拉HW 1網頁資料整理與程序練習方法，整理以下（20%）： \n 第 2 部分：列表和 if/else 語句簡介 \n 第 3 部分：for 迴圈簡介 \n 完成上述流程整理後，滿足HW2自評分數輸入cp2024自評表單中。 \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': 'Practice good procedures in groups of six \n 透過 Jupyterlab 良好的網頁，輪流指定各組編寫的 HW 2 相關的程式練習，以及網頁內容（localhost 與 Codespaces 環境）編輯。 \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題：Python 的數字、算法與迴圈 (20%) \n Python 課程教材： https:  //www.learnpythonwithjupyter.com/  - PART 4 與 Part 5 \n 完成上述流程整理後，滿足HW3自評分數輸入cp2024自評表單中。 \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': 'Practice good procedures in groups of six \n 透過 Jupyterlab 良好的網頁，輪流指定各組編寫的 HW 3 相關的程式練習，以及網頁內容（localhost 與 Codespaces 環境）編輯。 \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題：利用Python控制機電模擬系統（20%） \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用 CoppeliaSim 建立機電模擬系統 \n 利用 Python 跨網路控制瀏覽器上的機電類比系統 \n 範例： \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後，滿足HW4自評分數輸入cp2024自評表單中。 \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': 'Practice good procedures in groups of six \n 透過 Jupyterlab 良好的網頁，輪流指定各組編寫的 HW 4 相關的程式練習，以及網頁內容（localhost 與 Codespaces 環境）編輯。 \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口腔與書面專題報告 (20%) \n 期末口腔專題報告影片： \n ..... \n 期末書面專題報告檔案（pdf）： \n ..... \n 電腦輔助設計與實習課程總結心得： \n ..... \n 期末自報告評成績： \n 完成上述流程後，接受最終報告自評分數輸入cp2024自評表單中。 \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};